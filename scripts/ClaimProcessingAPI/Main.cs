/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘ClaimProcessingAPI.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir121 = null;
        public BindDirection bind_dir122 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity18 = null;
        public BindDirection bind_dir123 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity18_Policy = null;
        public BindDirection bind_dir124 = null;
        public BindDirection bind_dir125 = null;
        public BindDirection bind_dir126 = null;
        public BindDirection bind_dir127 = null;
        public BindDirection bind_dir128 = null;
        public BindDirection bind_dir129 = null;
        public BindDirection bind_dir130 = null;
        public BindDirection bind_dir131 = null;
        public BindDirection bind_dir132 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity14 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity14");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity16 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity16");
            _flow.DataExporterCloseActivity17 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity17");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity15 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity15");
            this.DataCursorActivity18 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity18");
            this.DataCursorActivity18_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence13 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence13");
            _flow.StServiceCallActivity4 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity4");
            _flow.StServiceCallActivity5 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity5");
            _flow.DataFetchActivity14.Comment = @"";
            _flow.DataFetchActivity14.IconPath = @"";
            _flow.DataFetchActivity14.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity14.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity14_QueryParameters_Document = new XmlDocument();
            DataFetchActivity14_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity14Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3def751e-23e2-4763-ac5f-818c714e4ed3</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>TestClaims!Sheet1</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>TestClaims</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{TestClaims!Sheet1.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet1$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity14_QueryParameters_Document.LoadXml(xmlDataFetchActivity14Params);
            _flow.DataFetchActivity14.QueryParameters = DataFetchActivity14_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("TestClaims!Sheet1", _flow.DataFetchActivity14);
            this.Activities.Add (_flow.DataFetchActivity14);
            XmlDocument StartActivity1_ExecutionInputParameters_Document = new XmlDocument();
            StartActivity1_ExecutionInputParameters_Document.PreserveWhitespace = true;
            StartActivity1_ExecutionInputParameters_Document.LoadXml(
@"<Arguments><ServiceEndpoint>http://localhost:8102/ServiceSimulation/Demo/ClaimProcessingService/ClaimProcessingService</ServiceEndpoint></Arguments>");
            _flow.StartActivity1.ExecutionInputParameters = StartActivity1_ExecutionInputParameters_Document;
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.TestClaims!Sheet1}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity18.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity18);
            _flow.Loop2.Activities.Add (_flow.Sequence13);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity16.Comment = @"";
            _flow.DataExporterActivity16.IconPath = @"";
            VTDPropertyInfoBase pi241 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter121 = new VTDObjectGetter(pi241);
            VTDPropertyInfoBase pi242 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter121 = new VTDObjectSetter(pi242);
            binding_setter121 = new StringFormaterDecorator(binding_setter121,"{Step.DataFetchActivity14.OutTable}");
            bind_dir121 = new BindDirection(_flow.DataFetchActivity14,binding_getter121,binding_setter121,BindTargetType.ToInProperty);
            _flow.DataExporterActivity16.InDirections.Add(bind_dir121);
            this.Activities.Add (_flow.DataExporterActivity16);
            _flow.DataExporterCloseActivity17.Comment = @"";
            _flow.DataExporterCloseActivity17.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity17);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity15.Comment = @"";
            _flow.DataDisconnectActivity15.IconPath = @"";
            VTDPropertyInfoBase pi243 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter122 = new VTDObjectGetter(pi243);
            VTDPropertyInfoBase pi244 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter122 = new VTDObjectSetter(pi244);
            binding_setter122 = new StringFormaterDecorator(binding_setter122,"{Step.DataFetchActivity14.OutTable}");
            bind_dir122 = new BindDirection(_flow.DataFetchActivity14,binding_getter122,binding_setter122,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity15.InDirections.Add(bind_dir122);
            this.Activities.Add (_flow.DataDisconnectActivity15);
            this.DataCursorActivity18.Comment = @"";
            this.DataCursorActivity18.IconPath = @"";
            VTDPropertyInfoBase pi245 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter123 = new VTDObjectGetter(pi245);
            VTDPropertyInfoBase pi246 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter123 = new VTDObjectSetter(pi246);
            binding_setter123 = new StringFormaterDecorator(binding_setter123,"{Step.DataFetchActivity14.OutTable}");
            bind_dir123 = new BindDirection(_flow.DataFetchActivity14,binding_getter123,binding_setter123,BindTargetType.ToInProperty);
            this.DataCursorActivity18.InDirections.Add(bind_dir123);
            this.DataCursorActivity18_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity18_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity18_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity18_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity18_Policy.StartCondition.Value = "";
            this.DataCursorActivity18_Policy.EndPosition = CursorEndPosition.UserSpecificRecord;
            this.DataCursorActivity18_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity18_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity18_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity18_Policy.EndCondition.Value = "";
            this.DataCursorActivity18_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity18_Policy.StepSize = 1;
            this.DataCursorActivity18_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity18.Policy = this.DataCursorActivity18_Policy;
            this.DataCursorActivity18.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity18.ResetCursor;
            _flow.Sequence13.Comment = @"";
            _flow.Sequence13.IconPath = @"";
            _flow.Sequence13.Name = @"Sequence13";
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity4);
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity5);
            XmlDocument StServiceCallActivity4_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity4_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity4_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><enterClaim xmlns=""http://hp.com/SOAQ/ServiceSimulation/2010/demo/01""><claim><claimedAmount xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.ClaimAount}</claimedAmount><date xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.Date}</date><description xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.ClaimDesc}</description><firstName xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.FirstName}</firstName><lastName xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.LastName}</lastName><socialSecurityNumber xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.SSN}</socialSecurityNumber></claim></enterClaim></Body></Envelope>");
            _flow.StServiceCallActivity4.InputEnvelope = StServiceCallActivity4_InputEnvelope_Document;
            _flow.StServiceCallActivity4.Comment = @"";
            _flow.StServiceCallActivity4.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity4.Name = @"enterClaim";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"{Step.OutputProperties.StartActivity1.ServiceEndpoint}" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.SoapAction = @"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01/IClaimProcessing/enterClaim";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity4.Service = @"ClaimProcessing";
            _flow.StServiceCallActivity4.Port = @"BasicHttpBinding_IClaimProcessing";
            _flow.StServiceCallActivity4.Operation = @"enterClaim";
            _flow.StServiceCallActivity4.IsOneWay = false;
            _flow.StServiceCallActivity4.SendRequestToService=true;
            _flow.StServiceCallActivity4.FaultExpected=false;
            _flow.StServiceCallActivity4.IsAsync=false;
            _flow.StServiceCallActivity4.TargetNamespace=@"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01";
            _flow.StServiceCallActivity4.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity4_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity4_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity4_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity4.ChannelBindingXml = StServiceCallActivity4_ChannelBindingXml;
            VTDPropertyInfoBase pi247 = new VTDPropertyInfoBase("ExecutionInputParameters","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ServiceEndpoint'][1]");
            VTDBaseGetter binding_getter124 = new VTDXPathGetter(pi247,XmlTypeCode.String);
            VTDPropertyInfoBase pi248 = new VTDPropertyInfoBase("TransportProtocol.SOAPProperties.EndpointAddress");
            VTDBaseSetter binding_setter124 = new VTDObjectSetter(pi248);
            binding_setter124 = new StringFormaterDecorator(binding_setter124,"{Step.OutputProperties.StartActivity1.ServiceEndpoint}");
            bind_dir124 = new BindDirection(_flow.StartActivity1,binding_getter124,binding_setter124,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir124);
            VTDPropertyInfoBase pi249 = new VTDPropertyInfoBase("SSN");
            VTDBaseGetter binding_getter125 = new VTDObjectGetter(pi249);
            VTDPropertyInfoBase pi250 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='socialSecurityNumber'][1]");
            VTDBaseSetter binding_setter125 = new VTDXPathSetter(pi250,XmlTypeCode.String);
            binding_setter125 = new StringFormaterDecorator(binding_setter125,"{DataSource.TestClaims!Sheet1.SSN}");
            bind_dir125 = new BindDirection(this.DataCursorActivity18,binding_getter125,binding_setter125,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir125);
            VTDPropertyInfoBase pi251 = new VTDPropertyInfoBase("LastName");
            VTDBaseGetter binding_getter126 = new VTDObjectGetter(pi251);
            VTDPropertyInfoBase pi252 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='lastName'][1]");
            VTDBaseSetter binding_setter126 = new VTDXPathSetter(pi252,XmlTypeCode.String);
            binding_setter126 = new StringFormaterDecorator(binding_setter126,"{DataSource.TestClaims!Sheet1.LastName}");
            bind_dir126 = new BindDirection(this.DataCursorActivity18,binding_getter126,binding_setter126,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir126);
            VTDPropertyInfoBase pi253 = new VTDPropertyInfoBase("FirstName");
            VTDBaseGetter binding_getter127 = new VTDObjectGetter(pi253);
            VTDPropertyInfoBase pi254 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='firstName'][1]");
            VTDBaseSetter binding_setter127 = new VTDXPathSetter(pi254,XmlTypeCode.String);
            binding_setter127 = new StringFormaterDecorator(binding_setter127,"{DataSource.TestClaims!Sheet1.FirstName}");
            bind_dir127 = new BindDirection(this.DataCursorActivity18,binding_getter127,binding_setter127,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir127);
            VTDPropertyInfoBase pi255 = new VTDPropertyInfoBase("ClaimDesc");
            VTDBaseGetter binding_getter128 = new VTDObjectGetter(pi255);
            VTDPropertyInfoBase pi256 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='description'][1]");
            VTDBaseSetter binding_setter128 = new VTDXPathSetter(pi256,XmlTypeCode.String);
            binding_setter128 = new StringFormaterDecorator(binding_setter128,"{DataSource.TestClaims!Sheet1.ClaimDesc}");
            bind_dir128 = new BindDirection(this.DataCursorActivity18,binding_getter128,binding_setter128,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir128);
            VTDPropertyInfoBase pi257 = new VTDPropertyInfoBase("Date");
            VTDBaseGetter binding_getter129 = new VTDObjectGetter(pi257);
            VTDPropertyInfoBase pi258 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='date'][1]");
            VTDBaseSetter binding_setter129 = new VTDXPathSetter(pi258,XmlTypeCode.DateTime);
            bind_dir129 = new BindDirection(this.DataCursorActivity18,binding_getter129,binding_setter129,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir129);
            VTDPropertyInfoBase pi259 = new VTDPropertyInfoBase("ClaimAount");
            VTDBaseGetter binding_getter130 = new VTDObjectGetter(pi259);
            VTDPropertyInfoBase pi260 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='claimedAmount'][1]");
            VTDBaseSetter binding_setter130 = new VTDXPathSetter(pi260,XmlTypeCode.Float);
            bind_dir130 = new BindDirection(this.DataCursorActivity18,binding_getter130,binding_setter130,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir130);
            XmlDocument StServiceCallActivity4_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity4.ExpectedOutputAttachments = StServiceCallActivity4_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity4_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity4.ExpectedFaultProperties = StServiceCallActivity4_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><enterClaimResponse xmlns=""http://hp.com/SOAQ/ServiceSimulation/2010/demo/01""><enterClaimResult><id xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"" /></enterClaimResult></enterClaimResponse></Body></Envelope>");
            _flow.StServiceCallActivity4.ExpectedOutputProperties = StServiceCallActivity4_ExpectedOutputProperties_Document;
            set_StServiceCallActivity4_checkpoints(_flow.StServiceCallActivity4);
            XmlDocument StServiceCallActivity5_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity5_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity5_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><getClaim xmlns=""http://hp.com/SOAQ/ServiceSimulation/2010/demo/01""><claimId><id xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{Step.OutputProperties.StServiceCallActivity4.Body.enterClaimResponse.enterClaimResult.id}</id></claimId></getClaim></Body></Envelope>");
            _flow.StServiceCallActivity5.InputEnvelope = StServiceCallActivity5_InputEnvelope_Document;
            _flow.StServiceCallActivity5.Comment = @"";
            _flow.StServiceCallActivity5.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity5.Name = @"getClaim";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"{Step.OutputProperties.StartActivity1.ServiceEndpoint}" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.SoapAction = @"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01/IClaimProcessing/getClaim";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity5.Service = @"ClaimProcessing";
            _flow.StServiceCallActivity5.Port = @"BasicHttpBinding_IClaimProcessing";
            _flow.StServiceCallActivity5.Operation = @"getClaim";
            _flow.StServiceCallActivity5.IsOneWay = false;
            _flow.StServiceCallActivity5.SendRequestToService=true;
            _flow.StServiceCallActivity5.FaultExpected=false;
            _flow.StServiceCallActivity5.IsAsync=false;
            _flow.StServiceCallActivity5.TargetNamespace=@"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01";
            _flow.StServiceCallActivity5.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity5_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity5_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity5_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity5.ChannelBindingXml = StServiceCallActivity5_ChannelBindingXml;
            VTDPropertyInfoBase pi261 = new VTDPropertyInfoBase("ExecutionInputParameters","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ServiceEndpoint'][1]");
            VTDBaseGetter binding_getter131 = new VTDXPathGetter(pi261,XmlTypeCode.String);
            VTDPropertyInfoBase pi262 = new VTDPropertyInfoBase("TransportProtocol.SOAPProperties.EndpointAddress");
            VTDBaseSetter binding_setter131 = new VTDObjectSetter(pi262);
            binding_setter131 = new StringFormaterDecorator(binding_setter131,"{Step.OutputProperties.StartActivity1.ServiceEndpoint}");
            bind_dir131 = new BindDirection(_flow.StartActivity1,binding_getter131,binding_setter131,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir131);
            VTDPropertyInfoBase pi263 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaimResponse'][1]/*[local-name(.)='enterClaimResult'][1]/*[local-name(.)='id'][1]");
            VTDBaseGetter binding_getter132 = new VTDXPathGetter(pi263,XmlTypeCode.Long);
            VTDPropertyInfoBase pi264 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='getClaim'][1]/*[local-name(.)='claimId'][1]/*[local-name(.)='id'][1]");
            VTDBaseSetter binding_setter132 = new VTDXPathSetter(pi264,XmlTypeCode.Long);
            bind_dir132 = new BindDirection(_flow.StServiceCallActivity4,binding_getter132,binding_setter132,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir132);
            XmlDocument StServiceCallActivity5_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity5.ExpectedOutputAttachments = StServiceCallActivity5_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity5_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity5.ExpectedFaultProperties = StServiceCallActivity5_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity5_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><getClaimResponse xmlns=""http://hp.com/SOAQ/ServiceSimulation/2010/demo/01"" /></Body></Envelope>");
            _flow.StServiceCallActivity5.ExpectedOutputProperties = StServiceCallActivity5_ExpectedOutputProperties_Document;
            set_StServiceCallActivity5_checkpoints(_flow.StServiceCallActivity5);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    