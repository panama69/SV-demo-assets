/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘ClaimProcessingAPI.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using Microsoft.Win32;
    using System;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Shared.Utilities;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Ext.LoadRunnerRTAddin;
    using HP.ST.Fwk.JVMLoader;
    
    
    
    public partial class LRWorkFlowScript : LRWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
        TestEntities _flow = null;
    	LoadRunner.LrApi lr;
    
    	
    	public BindDirection bind_dir133 = null;
        public BindDirection bind_dir134 = null;
        public HP.ST.Ext.LoadRunnerRTAddin.LoadRunnerDataCursor LoadRunnerDataCursor18 = null;
        public BindDirection bind_dir135 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy LoadRunnerDataCursor18_Policy = null;
        public BindDirection bind_dir136 = null;
        public BindDirection bind_dir137 = null;
        public BindDirection bind_dir138 = null;
        public BindDirection bind_dir139 = null;
        public BindDirection bind_dir140 = null;
        public BindDirection bind_dir141 = null;
        public BindDirection bind_dir142 = null;
        public BindDirection bind_dir143 = null;
        public BindDirection bind_dir144 = null;
        
        public LRWorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test", VuserClass.executionUnitInput)
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	this._context.SnapshotManager.EnableSnapshots = false;
        	this._context.PropertyBag["IsRunningInLodeMode"] = true;
        	_userCode = new TestUserCode();
            _flow = _userCode;
        	LoadInput();
        	this.Activities.Clear();
        	_flow.DataFetchActivity14 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity14");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity16 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity16");
            _flow.DataExporterCloseActivity17 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity17");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity15 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity15");
            this.LoadRunnerDataCursor18 = new HP.ST.Ext.LoadRunnerRTAddin.LoadRunnerDataCursor(_context,"LoadRunnerDataCursor18");
            this.LoadRunnerDataCursor18_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence13 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence13");
            _flow.StServiceCallActivity4 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity4");
            _flow.StServiceCallActivity5 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity5");
            _flow.DataFetchActivity14.Comment = @"";
            _flow.DataFetchActivity14.IconPath = @"";
            _flow.DataFetchActivity14.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.DataFetchActivity14.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity14.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity14_QueryParameters_Document = new XmlDocument();
            DataFetchActivity14_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity14Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3def751e-23e2-4763-ac5f-818c714e4ed3</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>TestClaims!Sheet1</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>TestClaims</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{TestClaims!Sheet1.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet1$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity14_QueryParameters_Document.LoadXml(xmlDataFetchActivity14Params);
            _flow.DataFetchActivity14.QueryParameters = DataFetchActivity14_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("TestClaims!Sheet1", _flow.DataFetchActivity14);
            this.Activities.Add (_flow.DataFetchActivity14);
            XmlDocument StartActivity1_ExecutionInputParameters_Document = new XmlDocument();
            StartActivity1_ExecutionInputParameters_Document.PreserveWhitespace = true;
            StartActivity1_ExecutionInputParameters_Document.LoadXml(
@"<Arguments><ServiceEndpoint>http://localhost:8102/ServiceSimulation/Demo/ClaimProcessingService/ClaimProcessingService</ServiceEndpoint></Arguments>");
            _flow.StartActivity1.ExecutionInputParameters = StartActivity1_ExecutionInputParameters_Document;
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.TestClaims!Sheet1}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !LoadRunnerDataCursor18.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Loop2.Activities.Add (this.LoadRunnerDataCursor18);
            _flow.Loop2.Activities.Add (_flow.Sequence13);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity16.Comment = @"";
            _flow.DataExporterActivity16.IconPath = @"";
            _flow.DataExporterActivity16.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi265 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter133 = new VTDObjectGetter(pi265);
            VTDPropertyInfoBase pi266 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter133 = new VTDObjectSetter(pi266);
            binding_setter133 = new StringFormaterDecorator(binding_setter133,"{Step.DataFetchActivity14.OutTable}");
            bind_dir133 = new BindDirection(_flow.DataFetchActivity14,binding_getter133,binding_setter133,BindTargetType.ToInProperty);
            _flow.DataExporterActivity16.InDirections.Add(bind_dir133);
            this.Activities.Add (_flow.DataExporterActivity16);
            _flow.DataExporterCloseActivity17.Comment = @"";
            _flow.DataExporterCloseActivity17.IconPath = @"";
            _flow.DataExporterCloseActivity17.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.DataExporterCloseActivity17);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            _flow.EndActivity3.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity15.Comment = @"";
            _flow.DataDisconnectActivity15.IconPath = @"";
            _flow.DataDisconnectActivity15.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi267 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter134 = new VTDObjectGetter(pi267);
            VTDPropertyInfoBase pi268 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter134 = new VTDObjectSetter(pi268);
            binding_setter134 = new StringFormaterDecorator(binding_setter134,"{Step.DataFetchActivity14.OutTable}");
            bind_dir134 = new BindDirection(_flow.DataFetchActivity14,binding_getter134,binding_setter134,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity15.InDirections.Add(bind_dir134);
            this.Activities.Add (_flow.DataDisconnectActivity15);
            this.LoadRunnerDataCursor18.Comment = @"";
            this.LoadRunnerDataCursor18.IconPath = @"";
            this.LoadRunnerDataCursor18.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi269 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter135 = new VTDObjectGetter(pi269);
            VTDPropertyInfoBase pi270 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter135 = new VTDObjectSetter(pi270);
            binding_setter135 = new StringFormaterDecorator(binding_setter135,"{Step.DataFetchActivity14.OutTable}");
            bind_dir135 = new BindDirection(_flow.DataFetchActivity14,binding_getter135,binding_setter135,BindTargetType.ToInProperty);
            this.LoadRunnerDataCursor18.InDirections.Add(bind_dir135);
            this.LoadRunnerDataCursor18_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.LoadRunnerDataCursor18_Policy.StartAtSpecificRow = 1;
            this.LoadRunnerDataCursor18_Policy.StartCondition.ColumnName = "";
            this.LoadRunnerDataCursor18_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.LoadRunnerDataCursor18_Policy.StartCondition.Value = "";
            this.LoadRunnerDataCursor18_Policy.EndPosition = CursorEndPosition.UserSpecificRecord;
            this.LoadRunnerDataCursor18_Policy.EndAtSpecificRow = 1;
            this.LoadRunnerDataCursor18_Policy.EndCondition.ColumnName = "";
            this.LoadRunnerDataCursor18_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.LoadRunnerDataCursor18_Policy.EndCondition.Value = "";
            this.LoadRunnerDataCursor18_Policy.StepType = CursorStepType.Forward;
            this.LoadRunnerDataCursor18_Policy.StepSize = 1;
            this.LoadRunnerDataCursor18_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.LoadRunnerDataCursor18.Policy = this.LoadRunnerDataCursor18_Policy;
            this.LoadRunnerDataCursor18.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.LoadRunnerDataCursor18.ResetCursor;
            _flow.Sequence13.Comment = @"";
            _flow.Sequence13.IconPath = @"";
            _flow.Sequence13.Name = @"Sequence13";
            _flow.Sequence13.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity4);
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity5);
            XmlDocument StServiceCallActivity4_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity4_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity4_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><enterClaim xmlns=""http://hp.com/SOAQ/ServiceSimulation/2010/demo/01""><claim><claimedAmount xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.ClaimAount}</claimedAmount><date xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.Date}</date><description xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.ClaimDesc}</description><firstName xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.FirstName}</firstName><lastName xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.LastName}</lastName><socialSecurityNumber xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{DataSource.TestClaims!Sheet1.SSN}</socialSecurityNumber></claim></enterClaim></Body></Envelope>");
            _flow.StServiceCallActivity4.InputEnvelope = StServiceCallActivity4_InputEnvelope_Document;
            _flow.StServiceCallActivity4.Comment = @"";
            _flow.StServiceCallActivity4.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity4.Name = @"enterClaim";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"{Step.OutputProperties.StartActivity1.ServiceEndpoint}" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.SoapAction = @"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01/IClaimProcessing/enterClaim";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity4.Service = @"ClaimProcessing";
            _flow.StServiceCallActivity4.Port = @"BasicHttpBinding_IClaimProcessing";
            _flow.StServiceCallActivity4.Operation = @"enterClaim";
            _flow.StServiceCallActivity4.IsOneWay = false;
            _flow.StServiceCallActivity4.SendRequestToService=true;
            _flow.StServiceCallActivity4.FaultExpected=false;
            _flow.StServiceCallActivity4.IsAsync=false;
            _flow.StServiceCallActivity4.TargetNamespace=@"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01";
            _flow.StServiceCallActivity4.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity4_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity4_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity4_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity4.ChannelBindingXml = StServiceCallActivity4_ChannelBindingXml;
            _flow.StServiceCallActivity4.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity4.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity4.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi271 = new VTDPropertyInfoBase("ExecutionInputParameters","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ServiceEndpoint'][1]");
            VTDBaseGetter binding_getter136 = new VTDXPathGetter(pi271,XmlTypeCode.String);
            VTDPropertyInfoBase pi272 = new VTDPropertyInfoBase("TransportProtocol.SOAPProperties.EndpointAddress");
            VTDBaseSetter binding_setter136 = new VTDObjectSetter(pi272);
            binding_setter136 = new StringFormaterDecorator(binding_setter136,"{Step.OutputProperties.StartActivity1.ServiceEndpoint}");
            bind_dir136 = new BindDirection(_flow.StartActivity1,binding_getter136,binding_setter136,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir136);
            VTDPropertyInfoBase pi273 = new VTDPropertyInfoBase("SSN");
            VTDBaseGetter binding_getter137 = new VTDObjectGetter(pi273);
            VTDPropertyInfoBase pi274 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='socialSecurityNumber'][1]");
            VTDBaseSetter binding_setter137 = new VTDXPathSetter(pi274,XmlTypeCode.String);
            binding_setter137 = new StringFormaterDecorator(binding_setter137,"{DataSource.TestClaims!Sheet1.SSN}");
            bind_dir137 = new BindDirection(this.LoadRunnerDataCursor18,binding_getter137,binding_setter137,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir137);
            VTDPropertyInfoBase pi275 = new VTDPropertyInfoBase("LastName");
            VTDBaseGetter binding_getter138 = new VTDObjectGetter(pi275);
            VTDPropertyInfoBase pi276 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='lastName'][1]");
            VTDBaseSetter binding_setter138 = new VTDXPathSetter(pi276,XmlTypeCode.String);
            binding_setter138 = new StringFormaterDecorator(binding_setter138,"{DataSource.TestClaims!Sheet1.LastName}");
            bind_dir138 = new BindDirection(this.LoadRunnerDataCursor18,binding_getter138,binding_setter138,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir138);
            VTDPropertyInfoBase pi277 = new VTDPropertyInfoBase("FirstName");
            VTDBaseGetter binding_getter139 = new VTDObjectGetter(pi277);
            VTDPropertyInfoBase pi278 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='firstName'][1]");
            VTDBaseSetter binding_setter139 = new VTDXPathSetter(pi278,XmlTypeCode.String);
            binding_setter139 = new StringFormaterDecorator(binding_setter139,"{DataSource.TestClaims!Sheet1.FirstName}");
            bind_dir139 = new BindDirection(this.LoadRunnerDataCursor18,binding_getter139,binding_setter139,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir139);
            VTDPropertyInfoBase pi279 = new VTDPropertyInfoBase("ClaimDesc");
            VTDBaseGetter binding_getter140 = new VTDObjectGetter(pi279);
            VTDPropertyInfoBase pi280 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='description'][1]");
            VTDBaseSetter binding_setter140 = new VTDXPathSetter(pi280,XmlTypeCode.String);
            binding_setter140 = new StringFormaterDecorator(binding_setter140,"{DataSource.TestClaims!Sheet1.ClaimDesc}");
            bind_dir140 = new BindDirection(this.LoadRunnerDataCursor18,binding_getter140,binding_setter140,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir140);
            VTDPropertyInfoBase pi281 = new VTDPropertyInfoBase("Date");
            VTDBaseGetter binding_getter141 = new VTDObjectGetter(pi281);
            VTDPropertyInfoBase pi282 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='date'][1]");
            VTDBaseSetter binding_setter141 = new VTDXPathSetter(pi282,XmlTypeCode.DateTime);
            bind_dir141 = new BindDirection(this.LoadRunnerDataCursor18,binding_getter141,binding_setter141,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir141);
            VTDPropertyInfoBase pi283 = new VTDPropertyInfoBase("ClaimAount");
            VTDBaseGetter binding_getter142 = new VTDObjectGetter(pi283);
            VTDPropertyInfoBase pi284 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaim'][1]/*[local-name(.)='claim'][1]/*[local-name(.)='claimedAmount'][1]");
            VTDBaseSetter binding_setter142 = new VTDXPathSetter(pi284,XmlTypeCode.Float);
            bind_dir142 = new BindDirection(this.LoadRunnerDataCursor18,binding_getter142,binding_setter142,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir142);
            XmlDocument StServiceCallActivity5_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity5_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity5_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><getClaim xmlns=""http://hp.com/SOAQ/ServiceSimulation/2010/demo/01""><claimId><id xmlns=""http://schemas.datacontract.org/2004/07/HP.SOAQ.ServiceSimulation.Demo"">{Step.OutputProperties.StServiceCallActivity4.Body.enterClaimResponse.enterClaimResult.id}</id></claimId></getClaim></Body></Envelope>");
            _flow.StServiceCallActivity5.InputEnvelope = StServiceCallActivity5_InputEnvelope_Document;
            _flow.StServiceCallActivity5.Comment = @"";
            _flow.StServiceCallActivity5.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity5.Name = @"getClaim";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"{Step.OutputProperties.StartActivity1.ServiceEndpoint}" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.SoapAction = @"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01/IClaimProcessing/getClaim";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity5.Service = @"ClaimProcessing";
            _flow.StServiceCallActivity5.Port = @"BasicHttpBinding_IClaimProcessing";
            _flow.StServiceCallActivity5.Operation = @"getClaim";
            _flow.StServiceCallActivity5.IsOneWay = false;
            _flow.StServiceCallActivity5.SendRequestToService=true;
            _flow.StServiceCallActivity5.FaultExpected=false;
            _flow.StServiceCallActivity5.IsAsync=false;
            _flow.StServiceCallActivity5.TargetNamespace=@"http://hp.com/SOAQ/ServiceSimulation/2010/demo/01";
            _flow.StServiceCallActivity5.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity5_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity5_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity5_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity5.ChannelBindingXml = StServiceCallActivity5_ChannelBindingXml;
            _flow.StServiceCallActivity5.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity5.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity5.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi285 = new VTDPropertyInfoBase("ExecutionInputParameters","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ServiceEndpoint'][1]");
            VTDBaseGetter binding_getter143 = new VTDXPathGetter(pi285,XmlTypeCode.String);
            VTDPropertyInfoBase pi286 = new VTDPropertyInfoBase("TransportProtocol.SOAPProperties.EndpointAddress");
            VTDBaseSetter binding_setter143 = new VTDObjectSetter(pi286);
            binding_setter143 = new StringFormaterDecorator(binding_setter143,"{Step.OutputProperties.StartActivity1.ServiceEndpoint}");
            bind_dir143 = new BindDirection(_flow.StartActivity1,binding_getter143,binding_setter143,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir143);
            VTDPropertyInfoBase pi287 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='enterClaimResponse'][1]/*[local-name(.)='enterClaimResult'][1]/*[local-name(.)='id'][1]");
            VTDBaseGetter binding_getter144 = new VTDXPathGetter(pi287,XmlTypeCode.Long);
            VTDPropertyInfoBase pi288 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='getClaim'][1]/*[local-name(.)='claimId'][1]/*[local-name(.)='id'][1]");
            VTDBaseSetter binding_setter144 = new VTDXPathSetter(pi288,XmlTypeCode.Long);
            bind_dir144 = new BindDirection(_flow.StServiceCallActivity4,binding_getter144,binding_setter144,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir144);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	public LoadRunner.LrApi LrApi
    	{
    		set { this.lr = value; }
    	}
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
            this.ExecuteStep();
            WorkFlowScript_Completed();
        }
        
    
        void Workflow_Executing()
        {	        
        }
        
        void WorkFlowScript_Completed()
        {
          	OnExecutionCompleted();
        }
                    
        void TransactionStart(object sender, EventArgs args)
        {
          	STActivityBase activity = sender as STActivityBase;
          	lr.start_transaction(activity.Name);
        }
            
        void TransactionEnd(object sender, EventArgs args)
        {
           	STActivityBase activity = sender as STActivityBase;
           	lr.end_transaction(activity.Name, lr.PASS);
        }
    
        private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
           	
        }
    
    }
    
    public partial class VuserClass
    {
    	STRunTimeContext ctx;
        LRWorkFlowScript script;
    
        public int Action()
        {
    		
    		try
    		{
    			
                script.LrApi = lr;
                script.InitializeComponent();
                script.Start();
            }
            catch (Exception)
            {
    			// todo: log the error message
            }
            
            return 0;
        }
        
        private void SendLogToVugen(string logText)
    	{
    		lr.log_message(logText);
    	}
    }
    
    }
    