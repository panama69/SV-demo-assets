using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;


namespace HP.SOAQ.ServiceSimulation.Demo {

    [ServiceBehavior(Namespace = "http://hp.com/SOAQ/ServiceSimulation/2010/demo/01", ConcurrencyMode = ConcurrencyMode.Single, InstanceContextMode = InstanceContextMode.Single)]
    public class ClaimProcessing : IClaimProcessing {

        private MemberAccountsClient memberAccountsClient;

        private readonly IDictionary<ClaimId, Claim> claimsById = new Dictionary<ClaimId, Claim>();
        private readonly IDictionary<MemberId, ISet<ClaimId>> membersClaimIds = new Dictionary<MemberId, ISet<ClaimId>>();

        private long nextClaimId = 0;


        public ClaimProcessing() {
            memberAccountsClient = new MemberAccountsClient();

            // update the URL of MemberAccountsService according to commandline argument
            String url = Config.getInstance().memberAcoountsServiceURL;
            if (url != null) {
                memberAccountsClient.Endpoint.Address = new EndpointAddress(url);
            }
        }

        ~ClaimProcessing() {
            memberAccountsClient.Close();
        }


        public ClaimId enterClaim(Claim claim) {
            Console.WriteLine("enterClaim(" + claim.firstName + ", " + claim.lastName + ", " + claim.socialSecurityNumber + ", $" + claim.claimedAmount + ")");

            Member[] found = null;
            try {
                found = memberAccountsClient.memberSearch(new ShortName() {firstName = claim.firstName, lastName = claim.lastName}, new DateTime(0), claim.socialSecurityNumber, null);
                Console.WriteLine("  -> found " + (found == null ? "0" : found.Length + " member" + (found == null || found.Length != 1 ? "s" : "")));
            } catch (Exception e) {
                Console.WriteLine("Error calling MemberAccountsService:\n" + e);
                throw new FaultException<MemberNotFoundFault>(new MemberNotFoundFault("Error calling MemberAccountsService:\n" + e.Message));
            } 
            
            if (found == null || found.Length == 0) {
                throw new FaultException<MemberNotFoundFault>(new MemberNotFoundFault());
            } else if (found.Length > 1) {
                throw new FaultException<MemberNotFoundFault>(new MemberNotFoundFault("" + found.Length + " members matched, be more specific to select one."));
            }

            // get user plan
            Plan plan = null;
            try {
                plan = memberAccountsClient.getMemberPlan(found[0].memberId);
                Console.WriteLine("  -> got " + plan.name + " plan with $" + plan.approvalLimit + " approval limit");
            }
            catch (Exception e) {
                Console.WriteLine("Error calling MemberAccountsService:\n" + e);
            }

            // check the limit and approve claim if the claimed amount is not higher
            claim.approved = claim.claimedAmount <= plan.approvalLimit;

            // get user details
            Detail detail = null;
            try {
                detail = memberAccountsClient.getMemberDetail(found[0].memberId);
                Console.WriteLine("  -> got " + detail.person.name + " details (" + detail.person.socialSecurityNumber + ", " + detail.person.dateOfBirth.ToShortDateString() + "...)");
            }
            catch (Exception e) {
                Console.WriteLine("Error calling MemberAccountsService:\n" + e);
            }

            // fill in the user detail in the claim
            ClaimId claimId = new ClaimId(nextClaimId++);
            MemberId memberId = new MemberId(found[0].memberId);
            claim.firstName = detail.person.name.firstName;
            claim.lastName = detail.person.name.lastName;
            claim.socialSecurityNumber = detail.person.socialSecurityNumber;
            claim.memberId = memberId;

            // store the claim
            claimsById.Add(claimId, claim);

            // update list of user's claims
            ISet<ClaimId> claimIds;
            if (membersClaimIds.TryGetValue(memberId, out claimIds)) {
                claimIds.Add(claimId);
            } else {
                claimIds = new HashSet<ClaimId>();
                claimIds.Add(claimId);
                membersClaimIds.Add(memberId,  claimIds);
            }

            Console.WriteLine("  -> " + claimId + ": " + claim);
            return claimId;
        }

        public ClaimId[] listClaims(MemberId memberId) {
            Console.WriteLine("listClaims(" + memberId + ")");
            ISet<ClaimId> claimIds;
            if (membersClaimIds.TryGetValue(memberId, out claimIds)) {
                return claimIds.ToArray();
            } else {
                return new ClaimId[0];
            }
        }

        public Claim getClaim(ClaimId claimId) {
            Console.WriteLine("getClaim(" + claimId + ")");
            Claim claim = null;
            if (claimsById.TryGetValue(claimId, out claim)) {
                return claim;
            } else {
                throw new FaultException<ClaimNotFoundFault>(new ClaimNotFoundFault("Claim " + claimId + " not found."));
            }
        }

    }

}
